#+Author: Miguel Escalante
#+Title:  My emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes :results silent

* Set everything up
** First Basics
#+begin_src emacs-lisp
      ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1024 1024))
  ;;        gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
  (setq inhibit-startup-message t) ; No emacs init paga
  (menu-bar-mode -1) ; I don't like the menus
  (scroll-bar-mode -1) ; I don't like the menus
  (tool-bar-mode -1) ; I don't like the menus
  (tooltip-mode -1) ; I don't like the menus
  (set-fringe-mode -1) ; I don't like the menus
  (setq visible-bell t) ; I don't like my errors being screamed at to me
  (global-auto-revert-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** directories
#+begin_src emacs-lisp
  (setq org-directory "~/Dropbox/org")
  (defun skls/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (skls/org-path "Tasks.org"))
  (setq default-directory "~/github/")
  (custom-set-variables
   '(org-directory "~/Dropbox/org")
   '(org-agenda-files (list org-directory)))
#+end_src

** Use-package
better package management for emacs.
#+begin_src emacs-lisp 
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
  (setq use-package-verbose t)

#+end_src
** Sraight.el
#+begin_src emacs-lisp :tangle no
;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Always use straight to install on systems other than Linux
(setq straight-use-package-by-default (not (eq system-type 'gnu/linux)))

;; Use straight.el for use-package expressions
(straight-use-package 'use-package)

;; Load the helper package for commands like `straight-x-clean-unused-repos'
(require 'straight-x)
#+end_src
** Themes
*** Visual Themes
#+begin_src emacs-lisp

  ;; You must run (all-the-icons-install-fonts) one time after
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  (use-package doom-modeline
    :after eshell     ;; Make sure it gets hooked after eshell
    :hook (after-init . doom-modeline-init)
    :custom-face
    (mode-line ((t (:height 0.85))))
    (mode-line-inactive ((t (:height 0.85))))
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))
    (use-package doom-themes
  :ensure t
  :init (load-theme 'doom-oceanic-next t))
  (use-package all-the-icons )
#+end_src
*** Pretty fonts per different environments
Make sure you have the font installed beforehand:
#+begin_src shell :noeval
sudo apt install fonts-firacode fonts-cantarell
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code Retina")

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina")

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'regular)
#+end_src

** Interaction with Emacs
*** Ivy
 Package for enhance the experience, along with swiper its a marvel.
 #+begin_src emacs-lisp
   (use-package ivy
     :diminish
     :bind (("C-s" . swiper)
            ("M-x" . counsel-M-x)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)
            ("C-f" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
     :init
     (ivy-mode 1))
   (use-package ivy-rich
     :after ivy
     :init
     (ivy-rich-mode 1))

   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
 #+end_src
*** General
#+begin_src emacs-lisp
  (use-package general
    :config
    ;; for frequently used prefix keys, the user can create a custom definer with a
    ;; default :prefix
    ;; using a variable is not necessary, but it may be useful if you want to
    ;; experiment with different prefix keys and aren't using `general-create-definer'
    (defconst my-leader "C-c")
    (general-create-definer my-leader-def
      :prefix "C-c")
    (my-leader-def
       ;; bind "C-c a" to 'org-agenda
       "a" 'org-agenda
       "b" 'counsel-bookmark
       "c" 'org-capture))
#+end_src

#+RESULTS:
: t

*** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.7))
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/github")
      (setq projectile-project-search-path '("~/github")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+end_src

** Text Scale
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
  (global-set-key "\C-x\C-b" 'ibuffer)
#+end_src
** Backup
I don't like emacs littering my working folders
#+begin_src emacs-lisp
  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  ;; Old config
  ;; (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
  (dolist (key '("\C-d" "\C-\M-b"))
    (global-unset-key key))
  ;; Multiple lines editing
  (use-package multiple-cursors
    :diminish multiple-cursors-mode
    :init
    (global-set-key (kbd "C-d") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-M-d") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    )
#+end_src
** Ripgrep
#+begin_src emacs-lisp
(use-package ripgrep)
#+end_src
* Programing
** General
*** Line display and colnum
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook
                  treemacs-mode-hook
                  shell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+end_src
*** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  )
#+end_src
*** Parens
#+begin_src emacs-lisp
  (use-package paren
    :hook (prog-mode . show-paren-mode)
    :config
    (show-paren-mode 1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
*** Electric Pair mode
#+begin_src emacs-lisp
  ;; (electric-pair-mode 1)
  ;; (add-hook 'electric-pair-mode-hook
  ;;           (lambda ()
  ;;             (setq-local electric-pair-inhibit-predicate
  ;;                         `(lambda (c)
  ;;                            (if (char-equal c ?<) t (electric-pair-inhibit-predicate c))
  ;;                            (if (char-equal c ?\") t (electric-pair-inhibit-predicate c))))))
#+end_src
*** whitespace
#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src
** Languages
*** Lsp-mode
#+begin_src emacs-lisp
  (defun skls/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . skls/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

  ;; (use-package lsp-ui
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp)

  (use-package lsp-ivy
    :after lsp)

  (use-package flycheck
    :hook (lsp-mode . flycheck-mode))

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all))

#+end_src
*** Company-mode
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 1))

(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src
*** Python-mode
#+begin_src emacs-lisp
  (setq tab-width 4)
  (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
  (require 'lsp-pyright)
  (setq-default py-split-windows-on-execute-function 'split-window-horizontally)
  (lsp))))  ; or lsp-deferred
  ;; (use-package python-mode
  ;; :hook (python-mode . lsp-deferred))
  (use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))

  (use-package dap-mode
  ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
      :keymaps 'lsp-mode-map
      :prefix lsp-keymap-prefix
      "d" '(dap-hydra t :wk "debugger")))

    (use-package pyvenv
      :after python-mode
      :config
      (pyvenv-mode 1)
      (setenv "WORKON_HOME" "~/.pyenv/versions/")
      (pyvenv-activate "~/.pyvenv/versions/"))
(use-package python-django)
#+end_src

*** R ess
#+begin_src emacs-lisp
  (defun skls/insert-r-pipe ()
    "R - %>% operator or 'then' pipe operator"
    (interactive)
    (just-one-space 1)
    (insert "%>%")
    (reindent-then-newline-and-indent))

  (use-package ess
    :defer t
    :commands R
    :bind (
           :map ess-mode-map
                ("C-<" . ess-insert-assign)
                ("C->" . skls/insert-r-pipe)
                :map inferior-ess-mode-map
                ("C-<" . ess-insert-assign)
                ("C->" . skls/insert-r-pipe)
                )
    :init
    (load "ess-site")
    )
#+end_src

*** Poly-r
This package helps me to build
#+begin_src emacs-lisp
  (use-package poly-R
    :config
    (defun skls/insert-rmd-chunk (language)
      "Insert an r-chunk in markdown mode. Necessary due to interactions between polymode and yas snippet"
      (interactive "sLanguage: ")
      (insert (concat "```{" language "}\n\n```"))
      (forward-line -1))
    (define-key poly-markdown+r-mode-map (kbd "M-n M-i") #'skls/insert-rmd-chunk)
    )
#+end_src

*** Docker
#+BEGIN_SRC emacs-lisp
  (use-package docker)
  (use-package docker-tramp)
  (use-package dockerfile-mode)
#+END_SRC
*** SQL
I used polymode in order to use jinja between the two braces, while still using sql indentation and everything else .
#+BEGIN_SRC emacs-lisp
  (eval-after-load "sql"
    '(use-package sql-indent))

  (defun skls/create-poly-jinja ()
    (use-package jinja2-mode)
    ;; (setq polymode-prefix-key (kbd "C-c n"))
    (define-hostmode poly-sql-hostmode :mode 'sql-mode)
    (define-innermode poly-jinja2-expr-sql-innermode
      :mode 'jinja2-mode
      :head-matcher "{{"
      :tail-matcher "}}"
      :head-mode 'host
      :tail-mode 'host)
    (define-polymode poly-sql-jinja2-mode
      :hostmode 'poly-sql-hostmode
      :innermodes '(poly-jinja2-expr-sql-innermode)
      ))

  (use-package polymode
    :commands poly-sql-jinja2-mode
    :mode ("\\.sql\\.j2\\'" . poly-sql-jinja2-mode)
    :config
    (skls/create-poly-jinja))

#+END_SRC

*** Bash
Essh.el The best package so far for editing shell files as pipelines
#+BEGIN_SRC emacs-lisp
  (global-set-key [f12] 'shell)
  (defun skls/essh-sh-hook ()
    (my-leader-def
      :keymaps 'sh-mode-map
      "C-r" 'pipe-region-to-shell
      "C-b" 'pipe-buffer-to-shell
      "C-c" 'pipe-line-to-shell
      "C-n" 'pipe-line-to-shell-and-step
      "C-f" 'pipe-function-to-shell
      "C-d" 'shell-cd-current-directory
      )
    (setq explicit-shell-file-name "/bin/zsh")
    (setq explicit-bash-args '("--noediting" "--login" "-i"))
    (setenv "SHELL" shell-file-name)
    (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m))

  (use-package essh
    :hook sh-mode
    :load-path "packages/"
    :config (skls/essh-sh-hook)
    )
#+END_SRC

#+RESULTS:
| essh |

*** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :commands terraform-mode
    :mode "\\.tf\\'")
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-always-compile-module t)
    (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src
** Eshell
#+begin_src emacs-lisp
  ;; (defun skls/configure-eshell ()
  ;;   ;; Save command history when commands are entered
  ;;   (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;;   ;; Truncate buffer for performance
  ;;   (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;;   ;; Bind some useful keys for evil-mode
  ;;   (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  ;;   (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  ;;   (evil-normalize-keymaps)

  ;;   (setq eshell-history-size         10000
  ;;         eshell-buffer-maximum-lines 10000
  ;;         eshell-hist-ignoredups t
  ;;         eshell-scroll-to-bottom-on-input t))

  ;; (use-package eshell-git-prompt
  ;;   :after eshell)

  ;; (use-package eshell
  ;;   :hook (eshell-first-time-mode . skls/configure-eshell)
  ;;   :config
  ;;   (with-eval-after-load 'esh-opt
  ;;     (setq eshell-destroy-buffer-when-process-dies t)
  ;;     (setq eshell-visual-commands '("htop" "zsh" "vim")))

  ;;   (eshell-git-prompt-use-theme 'powerline))
#+end_src

* File Types
*** Csv's
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.[PpTtCc][Ss][Vv]\\'"
    :config
    (progn
      (setq csv-separators '("," ";" "|" " " "\t"))
      )
    )
#+END_SRC
*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
#+END_SRC
*** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :commands yaml-mode
    :mode ("\\.yml$" . yaml-mode))
#+END_SRC

* Org Mode
The best package ever!!! :) see [[https://orgmode.org][OrgMode]]
** Babel
The best for writing Literate programing
#+begin_src emacs-lisp
  (defun skls/org-mode-babel ()
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("co" . "src conf"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("R" . "src R"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
    (setq org-confirm-babel-evaluate nil)
    (setq org-src-tab-acts-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (R . t)
       (python . t)
       (sql . t)
       (shell . t)
       )))
#+end_src
** Agenda
First we setup the agenda it's kidna messy so I put it in a different place
#+begin_src emacs-lisp
  (defun skls/org-agenda-setup ()
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "CANCELED(c)")
            (sequence  "WAIT(w)" "BACK(b)" "|")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))
    ;; TODO: org-todo-keyword-faces
    (setq org-todo-keyword-faces
          '(("NEXT" . (:foreground "orange red" :weight bold))
            ("WAIT" . (:foreground "HotPink2" :weight bold))
            ("BACK" . (:foreground "MediumPurple3" :weight bold))))
    ;; Save Org buffers after refiling!
    ;; (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (advice-add 'org-refile :after
                (lambda (&rest _)
                  (org-save-all-org-buffers)))

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("@Globant" . ?G)
            ("@SRE" . ?s)
            ("@Sociedat" . ?S)
            ("@ITAM" . ?I)
            ("@Deepsee" . ?D)
            ("@LiveNation" . ?L)
            ("note" . ?n)
            ("idea" . ?i)))

    (setq org-agenda-custom-commands
          `(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Actions")
                     (org-agenda-max-todos nil)))
              (tags-todo "+@ITAM/!-NEXT"
                         ((org-agenda-overriding-header "Pendientes ITAM")))
              (tags-todo "+@Sociedat/!-NEXT"
                         ((org-agenda-overriding-header "Pendientes Sociedat")))
              (tags-todo "+@Globant/!-NEXT"
                         ((org-agenda-overriding-header "Pendientes Globant")))
              (tags-todo "+@home/!-NEXT"
                         ((org-agenda-overriding-header "Pendientes Casa")))
              (tags-todo "-@ITAM-@Globant-@home-@Sociedat/!-NEXT"
                    ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                     (org-agenda-files '(,(skls/org-path "Tasks.org")))
                     (org-agenda-text-search-extra-files nil)))))

            ("n" "Next Tasks"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Dropbox/org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Dropbox/org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Dropbox/org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
               :clock-in :clock-resume
               :empty-lines 1)
              ("w" "Workflows")
              ("we" "Checking Email" entry (file+olp+datetree "~/Dropbox/org/Journal.org")
               "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

              ("m" "Metrics Capture")
              ("mw" "Weight" table-line (file+headline "~/Dropbox/org/Metrics.org" "Weight")
               "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
    )
#+end_src

** Org-superstar
#+begin_src emacs-lisp
  (defun skls/org-superstar ()
    (use-package org-superstar)
    (org-superstar-mode 1))
#+end_src
** Org reveal
#+begin_src emacs-lisp
  (defun skls/org-reveal ()
    (use-package ox-reveal
      :custom
      (org-reveal-note-key-char nil)
      (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
      (setq org-reveal-mathjax t)
      )
    (use-package htmlize)
    (require 'ox-reveal)
    )

 #+end_src
** Org -> Md
#+begin_src emacs-lisp
  (use-package ox-gfm
    :after org)
#+end_src
** Basic Setup
#+begin_src emacs-lisp
    (defun skls/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
    (defun skls/org-mode-setup ()
      (toggle-truncate-lines)
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (defun skls/org-mode-visual-fill ()
      (use-package visual-fill-column)
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package org
      :commands (org-capture org-agenda)
      :hook ((org-mode . skls/org-mode-babel)
             (org-mode . skls/org-mode-setup)
             (org-mode . skls/org-mode-visual-fill)
             (org-mode . skls/org-superstar)
             (org-mode . skls/org-reveal))
      :config
      (setq org-ellipsis " ▾")
      (skls/org-agenda-setup)
      (skls/org-font-setup)
      )
#+end_src
** Faces
#+begin_src emacs-lisp
(with-eval-after-load 'org-faces
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)))
#+end_src

** Org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Dropbox/org/org-roam")
  (org-roam-completion-everywhere t)
  (org-roam-completion-system 'default)
  (org-roam-capture-templates
    '(("d" "default" plain
       #'org-roam-capture--get-point
       "%?"
       :file-name "%<%Y%m%d%H%M%S>-${slug}"
       :head "#+title: ${title}\n"
       :unnarrowed t)
      ("ll" "link note" plain
       #'org-roam-capture--get-point
       "* %^{Link}"
       :file-name "Inbox"
       :olp ("Links")
       :unnarrowed t
       :immediate-finish)
      ("lt" "link task" entry
       #'org-roam-capture--get-point
       "* TODO %^{Link}"
       :file-name "Inbox"
       :olp ("Tasks")
       :unnarrowed t
       :immediate-finish)))
  (org-roam-dailies-directory "Journal/")
  (org-roam-dailies-capture-templates
    '(("d" "default" entry
       #'org-roam-capture--get-point
       "* %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("t" "Task" entry
       #'org-roam-capture--get-point
       "* TODO %?\n  %U\n  %a\n  %i"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Tasks")
       :empty-lines 1
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("j" "journal" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("l" "log entry" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %?"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
      ("m" "meeting" entry
       #'org-roam-capture--get-point
       "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
       :file-name "Journal/%<%Y-%m-%d>"
       :olp ("Log")
       :head "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")))
  :bind (:map org-roam-mode-map
          (("C-c n l"   . org-roam)
           ("C-c n f"   . org-roam-find-file)
           ("C-c n d"   . org-roam-dailies-find-date)
           ("C-c n c"   . org-roam-dailies-capture-today)
           ("C-c n C r" . org-roam-dailies-capture-tomorrow)
           ("C-c n t"   . org-roam-dailies-find-today)
           ("C-c n y"   . org-roam-dailies-find-yesterday)
           ("C-c n r"   . org-roam-dailies-find-tomorrow)
           ("C-c n g"   . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+end_src
** Deft
#+begin_src emacs-lisp
(use-package deft
  :commands (deft)
  :config (setq deft-directory "~/Dropbox/org/org-roam"
                deft-recursive t
                deft-extensions '("md" "org")))
#+end_src
** Org-Download
#+begin_src emacs-lisp
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))

#+end_src

* Writing
** Latex
#+BEGIN_SRC emacs-lisp
(use-package auctex)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
* File Management
** Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-agho --group-directories-first")

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    ;; (evil-collection-define-key 'normal 'dired-mode-map
    ;;   "H" 'dired-hide-dotfiles-mode)
    )

#+end_src
* Autosave to init.el
This automatically saves all the elisp code chunks to init.el
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun skls/org-babel-tangle-config ()
    (when (string-equal  (file-name-directory (buffer-file-name))
                         (expand-file-name"~/github/dotfiles/"))
                         ;; Dynamic scoping to the rescue
                         (let ((org-confirm-babel-evaluate nil))
                           (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'skls/org-babel-tangle-config)))
#+end_src
for the actual config file !
#+begin_src emacs-lisp
  ;; (when (string-equal (file-name-directory (buffer-file-name))
  ;;                     (expand-file-name user-emacs-directory))

#+end_src

* Essh.el
#+begin_src emacs-lisp :tangle .emacs.d/packages/essh.el
    ;;; essh.el --- a set of commands that emulate for bash what ESS is to R.

    ;; Filename: essh.el


    ;; ------------------------------------------------------------------ ;;
    ;; TO INSTALL:                                                        ;;
    ;; 1. add essh.el in your load-path.                                  ;;
    ;;                                                                    ;;
    ;; 2. add to your .emacs file:                                        ;;
    ;;                                                                    ;;
    ;; (require 'essh)                                                    ;;
    ;; (defun essh-sh-hook ()                                             ;;
    ;;   (define-key sh-mode-map "\C-c\C-r" 'pipe-region-to-shell)        ;;
    ;;   (define-key sh-mode-map "\C-c\C-b" 'pipe-buffer-to-shell)        ;;
    ;;   (define-key sh-mode-map "\C-c\C-j" 'pipe-line-to-shell)          ;;
    ;;   (define-key sh-mode-map "\C-c\C-n" 'pipe-line-to-shell-and-step) ;;
    ;;   (define-key sh-mode-map "\C-c\C-f" 'pipe-function-to-shell)      ;;
    ;;   (define-key sh-mode-map "\C-c\C-d" 'shell-cd-current-directory)) ;;
    ;; (add-hook 'sh-mode-hook 'essh-sh-hook)                             ;;
    ;; ------------------------------------------------------------------ ;;

    ;; function taken from ess package
    (defun essh-next-code-line (&optional arg)
      "Move ARG lines of code forward (backward if ARG is negative).
    Skips past all empty and comment lines.	 Default for ARG is 1.

    On success, return 0.  Otherwise, go as far as possible and return -1."
      (interactive "p")
      (or arg (setq arg 1))
      (beginning-of-line)
      (let ((n 0)
            (inc (if (> arg 0) 1 -1)))
        (while (and (/= arg 0) (= n 0))
          (setq n (forward-line inc)); n=0 is success
          (while (and (= n 0)
                      (looking-at "\\s-*\\($\\|\\s<\\)"))
            (setq n (forward-line inc)))
          (setq arg (- arg inc)))
        n))

    (defun process-shell ()
      "returns a list with existing shell process."
      (interactive)
      (setq listpr (process-list))
      (setq lengthpr (length listpr))
      (setq i 0)
      (setq listshellp '())
      (while (< i lengthpr)
        (setq pos (string-match "shell" (prin1-to-string (elt listpr i))))
        (if pos (add-to-list 'listshellp (process-name (get-process (elt listpr i)))))
        (setq i (+ 1 i)))
      listshellp)


    (defun process-shell-choose ()
      "returns which process to use."
    (interactive)
    (setq outpr 0)
    (setq cbuf (current-buffer))
    (setq shelllist (process-shell))
    (setq shelln (length shelllist))
    (if (eq shelln 0)
        (progn (shell)
               (switch-to-buffer cbuf)
               (setq outpr (get-process "shell"))
               (sleep-for 0.5)))
    (if (eq shelln 1)
        (setq outpr (get-process (elt shelllist 0))))
    (if (> shelln 1)
    (progn
    (setq proc (completing-read "Send code to:" shelllist nil t (elt shelllist 0)))
    (setq outpr (get-process proc))))
    outpr)


    (defun shell-eval-line (sprocess command)
      "Evaluates a single command into the shell process."
      (setq sbuffer (process-buffer sprocess))
      (setq command (concat command "\n"))
      (accept-process-output sprocess 0 10)
      (with-current-buffer sbuffer
        (end-of-buffer) ;point is not seen being moved (unless sbuffer is focused)
        (insert command)			;pastes the command to shell
        (set-marker (process-mark sprocess) (point-max))
        (process-send-string sprocess command)
        ;; (accept-process-output sprocess 0 10)
        ))

    (defun shell-cd-current-directory ()
      "Changes the shell working directory to the current buffer's one."
      (interactive)
      (setq sprocess (process-shell-choose))
      (setq com (format "cd %s" (file-name-directory default-directory)))
      (shell-eval-line sprocess com))


    (defun pipe-line-to-shell (&optional step)
      "Evaluates the current line to the shell."
      (interactive ())
      (setq com (buffer-substring (point-at-bol) (point-at-eol)))
      (if (> (length com) 0)
          (progn
            (setq sprocess (process-shell-choose))
            (shell-eval-line sprocess com)
            (when step (essh-next-code-line)))
        (message "No command in this line")))

    (defun pipe-line-to-shell-and-step ()
      "Evaluates the current line to the shell and goes to next line."
      (interactive)
      (pipe-line-to-shell t))

    (defun pipe-region-to-shell (start end)
      "Sends a region to the shell."
      (interactive "r")
      (setq com (buffer-substring start end))	       ;reads command
      (setq lcom (length com))		       ;count chars
      (setq lastchar (substring com (1- lcom) lcom)) ;get last char
      (unless (string-match "\n" lastchar) ;if last char is not "\n", then...
        (setq com (concat com "\n")))	     ;...add it!
      (setq sprocess (process-shell-choose))
      (setq sbuffer (process-buffer sprocess))
      (while (> (length com) 0)
        (setq pos (string-match "\n" com))
        (setq scom (substring com 0 pos))
        (setq com (substring com (min (length com) (1+ pos))))
        (shell-eval-line sprocess scom)
        (accept-process-output sprocess 0 10)
        ))


    (defun pipe-buffer-to-shell ()
      "Evaluate whole buffer to the shell."
      (interactive)
      (pipe-region-to-shell (point-min) (point-max)))

    (defun pipe-function-to-shell ()
    "Evaluate function to the shell."
    (interactive)
    (setq beg-end (essh-beg-end-of-function))
    (if beg-end
        (save-excursion
          (setq beg (nth 0 beg-end))
          (setq end (nth 1 beg-end))
          (goto-line beg)
          (setq origin (point-at-bol))
          (goto-line end)
          (setq terminal (point-at-eol))
          (pipe-region-to-shell origin terminal))
      (message "No function at current point.")))

    (defun essh-beg-end-of-function ()
      "Returns the lines where the function starts and ends. If there is no function at current line, it returns nil."
      (interactive)
      (setq curline (line-number-at-pos))	;current line
      (setq curcom (buffer-substring (point-at-bol) (point-at-eol)))
      (setq pos (string-match "function" curcom))
      (save-excursion
        (if pos
            (progn
              (setq beg curline))
          (progn
            (while (not pos)
              (setq curline (1- curline))	;current line
              (previous-line)			;go to previous line
              (setq curcom (buffer-substring (point-at-bol) (point-at-eol)))
              (setq pos (string-match "function" curcom)))
          (setq beg curline)))
        (beginning-of-line)
        (forward-list)			; move pointer to first matching brace
        (setq end (line-number-at-pos)))
      ;; (message (format  "%d %d" beg end))
      (if (and (<= (line-number-at-pos) end) (>= (line-number-at-pos) beg))
          (list beg end)
        nil))

  ;;;###autoload
  (defun essh ())
  (provide 'essh)

#+end_src
* Mac OS
** Keybindings
#+BEGIN_SRC emacs-lisp
  (cond
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin:/usr/local/bin/:$HOME/.pyenv/shims"))
    (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
    (global-set-key (kbd "M-ñ") '(lambda () (interactive) (insert "~")))
    (global-set-key (kbd "M-º") '(lambda () (interactive) (insert "\\")))
    (global-set-key (kbd "M-2") '(lambda () (interactive) (insert "@")))
    (global-set-key (kbd "M-1") '(lambda () (interactive) (insert "|")))
    (global-set-key (kbd "M-ç") '(lambda () (interactive) (insert "}")))
    (global-set-key (kbd "M-+") '(lambda () (interactive) (insert "]")))
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (message "Mac OS X")
    ))
   )
  ;; window jump
  (cond
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (defvar my-keys-minor-mode-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "<C-s-up>") 'window-jump-up)
          (define-key map (kbd "<C-s-right>") 'window-jump-right)
          (define-key map (kbd "<C-s-down>") 'window-jump-down)
          (define-key map (kbd "<C-s-left>") 'window-jump-left)
          map)
        "my-keys-minor-mode keymap.")
      )))

#+END_SRC
* Cleanup
Dial down GC thershold so it runs frequently but in less time.
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 5 1024 1024))
#+end_src
* Dashboard
#+begin_src emacs-lisp
  ;; (defun skls/dashboard-banner ()
  ;;   """Set a dashboard banner including information on package initialization
  ;;    time and garbage collections."""
  ;;    (setq dashboard-banner-logo-title
  ;;          (format "Emacs ready in %.2f seconds with %d garbage collections."
  ;;                  (float-time (time-subtract after-init-time before-init-time)) gs-done)))

  ;; (use-package dashboard
  ;;   :init
  ;;   (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  ;;   (add-hook 'dashboard-mode-hook 'skls/dashboard-banner)
  ;;   :config
  ;;   (setq dashboard-startup-banner 'logo)
  ;;   (dashboard-setup-startup-hook))

#+end_src
